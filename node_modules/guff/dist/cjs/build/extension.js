'use strict'

var _interopRequireWildcard = require('@babel/runtime/helpers/interopRequireWildcard')

exports.__esModule = true
exports.default = extension
exports.dropExtension = dropExtension
exports.DropExtension = exports.Extension = void 0

var _Query = _interopRequireWildcard(require('./Query'))

var _utils = require('../utils')

class Extension extends _Query.default {
  constructor(knex, name) {
    super(knex, {
      create: 'CREATE',
      extension: 'EXTENSION',
      ifNotExists: _Query.toUpper,
      name: _Query.identifier,
      schema: _Query.identifierBindings,
      version: _Query.identifier,
      from: _Query.identifier,
    })
    this.name(name)
  }

  get sqlName() {
    return this._nameBindings.nameBinding
  }

  then(...args) {
    return super
      .then(r => {
        _utils.log.success('created extension:', this.sqlName)

        return r
      })
      .then(...args)
  }
}

exports.Extension = Extension

function extension(knex, name) {
  return new Extension(knex, name)
}

class DropExtension extends _Query.default {
  constructor(knex, name) {
    super(knex, {
      create: 'DROP',
      extension: 'EXTENSION',
      ifExists: _Query.toUpper,
      name: _Query.identifier,
      cascade: _Query.toUpper,
      restrict: _Query.toUpper,
    })
    this.name(name)
  }

  get sqlName() {
    return this._nameBindings.nameBinding
  }

  then(...args) {
    return super
      .then(r => {
        _utils.log.success('dropped extension:', this.sqlName)

        return r
      })
      .then(...args)
  }
}

exports.DropExtension = DropExtension

function dropExtension(knex, name) {
  return new DropExtension(knex, name)
}
