'use strict'

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')

exports.__esModule = true
exports.dropSchema = dropSchema
exports.default = createSchema

var _object = _interopRequireDefault(require('empty/object'))

var _array = _interopRequireDefault(require('empty/array'))

var _utils = require('../utils')

var _getSchemaName = require('./getSchemaName')

// DO NOT EXPOSE TO USERS
function dropSchema(knex, opt = _object.default) {
  let {ifExists = true, ignore = _array.default} = opt
  const schemaNames = (0, _getSchemaName.getSchemaNames)(knex)
  const schemas = []

  for (let schemaName of schemaNames) {
    function _ref(r) {
      _utils.log.success('dropped schema:', schemaName)

      return r
    }

    if (schemaName !== 'public' && opt.ignore.indexOf(schemaName) === -1) {
      // knex's internal dropSchema doesn't cascade
      schemas.push(
        (0, _utils.client)(knex)
          .raw(
            `DROP SCHEMA ${ifExists ? 'IF EXISTS' : ''} ?? CASCADE`,
            schemaName
          )
          .then(_ref)
      )
    }
  }

  return Promise.all(schemas)
} // DO NOT EXPOSE TO USERS

function createSchema(knex, opt = _object.default) {
  let {ifNotExists = true, ignore = [], authorization} = opt
  const schemaNames = (0, _getSchemaName.getSchemaNames)(knex)
  const schemas = []

  for (let schemaName of schemaNames) {
    function _ref2(r) {
      _utils.log.success('created schema:', schemaName)

      return r
    }

    if (schemaName !== 'public' && opt.ignore.indexOf(schemaName) === -1) {
      const fn = ifNotExists ? 'createSchemaIfNotExists' : 'createSchema'
      schemas.push(
        (0, _utils.schema)(knex)
          [fn](schemaName)
          .then(_ref2)
      )
    }
  }

  return Promise.all(schemas)
}
