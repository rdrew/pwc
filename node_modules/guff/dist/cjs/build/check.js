'use strict'

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')

exports.__esModule = true
exports.default = check

var _objectSpread2 = _interopRequireDefault(
  require('@babel/runtime/helpers/objectSpread')
)

var _object = _interopRequireDefault(require('empty/object'))

var _utils = require('../utils')

class Check {
  constructor(knex, table, column, initial) {
    this.knex = (0, _utils.client)(knex)
    this.table = table
    this.column = column
    this.constraints = null

    if (initial !== void 0) {
      this.constraint(initial)
    }
  }

  constraint(constraint, bindings = _object.default) {
    this.constraints = this.knex.raw(
      constraint,
      (0, _objectSpread2.default)(
        {
          col: this.column,
          column: this.column,
        },
        bindings
      )
    )
    return this
  }

  op(OP, constraint, bindings = _object.default) {
    if (this.constraints === null) {
      return this.constraint(constraint, bindings)
    }

    this.constraints = this.knex.raw(`?? ${OP} ??`, [
      this.constraints,
      this.knex.raw(
        constraint,
        (0, _objectSpread2.default)(
          {
            col: this.column,
            column: this.column,
          },
          bindings
        )
      ),
    ])
    return this
  }

  and(constraint, bindings) {
    return this.op('AND', constraint, bindings)
  }

  or(constraint, bindings) {
    return this.op('OR', constraint, bindings)
  }

  toSQL() {
    return this.knex
      .raw(`ALTER TABLE :table: ADD CONSTRAINT :col: CHECK (:check)`, {
        table: this.table,
        col: this.column,
        check: this.constraints,
      })
      .toSQL()
  }

  then(...args) {
    return this.knex
      .raw(`ALTER TABLE :table: ADD CONSTRAINT :col: CHECK (:check)`, {
        table: this.table,
        col: this.column,
        check: this.constraints,
      })
      .then(...args)
  }
}

function check(knex, table, column, initial) {
  return new Check(knex, table, column, initial)
}
