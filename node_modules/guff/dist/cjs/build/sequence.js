'use strict'

var _interopRequireWildcard = require('@babel/runtime/helpers/interopRequireWildcard')

exports.__esModule = true
exports.default = sequence
exports.dropSequence = dropSequence
exports.DropSequence = exports.Sequence = void 0

var _utils = require('../utils')

var _Query = _interopRequireWildcard(require('./Query'))

class Sequence extends _Query.default {
  constructor(knex, name) {
    super(knex, {
      create: 'CREATE',
      temp: _Query.toUpper,
      sequence: 'SEQUENCE',
      ifNotExists: _Query.toUpper,
      name: _Query.identifier,
      increment: _Query.identifierBindings,
      minvalue: _Query.identifierBindings,
      noMinvalue: _Query.toUpper,
      maxvalue: _Query.identifierBindings,
      noMaxvalue: _Query.toUpper,
      start: _Query.identifierBindings,
      cache: _Query.identifierBindings,
      noCycle: _Query.toUpper,
      cycle: _Query.toUpper,
      ownedBy: _Query.identifierBindings,
      ownedByNone: _Query.toUpper,
    })
    this.name(name)
  }

  get sqlName() {
    return this._nameBindings.nameBinding
  }

  then(...args) {
    return super
      .then(r => {
        _utils.log.success('created sequence:', this.sqlName)

        return r
      })
      .then(...args)
  }
}

exports.Sequence = Sequence

function sequence(knex, name) {
  return new Sequence(knex, name)
}

class DropSequence extends _Query.default {
  constructor(knex, name) {
    super(knex, {
      create: 'DROP',
      trigger: 'SEQUENCE',
      ifExists: _Query.toUpper,
      name: _Query.identifier,
      cascade: _Query.toUpper,
      restrict: _Query.toUpper,
    })
    this.name(name)
  }

  get sqlName() {
    return this._nameBindings.nameBinding
  }

  then(...args) {
    return super
      .then(r => {
        _utils.log.success('dropped sequence:', this.sqlName)

        return r
      })
      .then(...args)
  }
}

exports.DropSequence = DropSequence

function dropSequence(knex, name) {
  return new DropSequence(knex, name)
}
