'use strict'

var _interopRequireWildcard = require('@babel/runtime/helpers/interopRequireWildcard')

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')

exports.__esModule = true
exports.default = createKey
exports.dropKey = dropKey

var _object = _interopRequireDefault(require('empty/object'))

var _invariant = _interopRequireDefault(require('invariant'))

var _utils = require('../utils')

var _getSchemaName = _interopRequireDefault(require('./getSchemaName'))

var _func = _interopRequireWildcard(require('./func'))

const cache = {}
const keyFunc = `
DECLARE
  result text;
BEGIN
  SELECT encode(gen_random_bytes(bytes), 'base64') into result;
  RETURN result;
END;
`
const keyArgs = [
  {
    name: 'bytes',
    type: 'int4',
    default: 18,
  },
]

function createKey(knex, opt = _object.default) {
  !(knex !== void 0)
    ? process.env.NODE_ENV !== 'production'
      ? (0, _invariant.default)(
          false,
          `createKey function requires that you provide a knex instance ` +
            `as the first argument`
        )
      : invariant(false)
    : void 0
  let {name = 'guff_key'} = opt
  const key = JSON.stringify({
    name,
    schemaName: (0, _getSchemaName.default)(knex),
  })

  if (cache[key] === void 0) {
    cache[key] = (0, _func.default)(knex, name)
      .args(keyArgs)
      .body(keyFunc)
      .returns('text')
  }

  return cache[key]
}

function dropKey(knex, name = 'guff_key', opt) {
  return (0, _func.dropFunc)(knex, name).args(keyArgs)
}
