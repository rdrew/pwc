'use strict'

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')

var _interopRequireWildcard = require('@babel/runtime/helpers/interopRequireWildcard')

exports.__esModule = true
exports.args = exports.down = exports.up = void 0

var _utils = require('../../utils')

var _createKey = _interopRequireWildcard(require('../createKey'))

var _extension = _interopRequireWildcard(require('../extension'))

var _getSchemaName = _interopRequireDefault(require('../getSchemaName'))

const up = async knex => {
  await (0, _extension.default)(knex, 'pgcrypto')
    .ifNotExists()
    .schema((0, _getSchemaName.default)(knex))
  await (0, _createKey.default)(knex)
}

exports.up = up

const down = async (knex, opt) => {
  await (0, _extension.dropExtension)(knex, 'pgcrypto')
    .ifExists()
    .cascade()
  await (0, _createKey.dropKey)(knex, opt && opt.name)
}

exports.down = down
const args = {
  specificType: (knex, name) => [name, 'text'],
  defaultTo: (knex, name, opt) =>
    (0, _utils.client)(knex).raw(
      'guff_key(?)',
      opt && opt.length ? opt.length : 24
    ),
  notNullable: [],
  comment: (0, _utils.trimAll)(`
    Creates a cryptographically secure key that can be used for things like
    validating user sessions.
  `),
}
exports.args = args
