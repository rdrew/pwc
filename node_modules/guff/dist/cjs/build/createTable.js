'use strict'

var _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')

exports.__esModule = true
exports.default = createTable
exports.dropTable = dropTable

var _array = _interopRequireDefault(require('empty/array'))

var _utils = require('../utils')

var _getSchemaName = _interopRequireDefault(require('./getSchemaName'))

function _ref3(c) {
  return c.after()
}

async function createTable(knex, tableName, columns) {
  let tableColumns

  function _ref2(r) {
    _utils.log.success('created table:', tableName)

    return r
  }

  await Promise.all(columns.map(c => c.setKnex(knex))).then(cols => {
    function _ref(t) {
      return (tableColumns = cols.map(c => c(t)))
    }

    return (0, _utils.schema)(knex)
      .hasTable(tableName)
      .then(exists => {
        if (exists === false) {
          return (0, _utils.schema)(knex)
            .createTable(tableName, _ref)
            .then(_ref2)
        } else {
          ;(0, _utils.log)('table already exists:', tableName)
          return exists
        }
      })
  })

  if (tableColumns !== void 0) {
    await Promise.all(tableColumns.map(_ref3))
  }

  return tableColumns || _array.default
}

async function dropTable(knex, tableName, columns = _array.default) {
  await Promise.all(columns.map(c => c.setKnex(knex).down(tableName)))
  return knex.schema.dropTableIfExists(tableName).then(r => {
    _utils.log.success('dropped table:', tableName)

    return r
  })
}
