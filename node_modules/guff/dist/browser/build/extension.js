import _createClass from '@babel/runtime/helpers/createClass'
import _inheritsLoose from '@babel/runtime/helpers/inheritsLoose'
import Query, {toUpper, identifier, identifierBindings} from './Query'
import {log} from '../utils'

function _get() {
  return this._nameBindings.nameBinding
}

export var Extension =
  /*#__PURE__*/
  (function(_Query) {
    _inheritsLoose(Extension, _Query)

    function Extension(knex, name) {
      var _this

      _this =
        _Query.call(this, knex, {
          create: 'CREATE',
          extension: 'EXTENSION',
          ifNotExists: toUpper,
          name: identifier,
          schema: identifierBindings,
          version: identifier,
          from: identifier,
        }) || this

      _this.name(name)

      return _this
    }

    var _proto = Extension.prototype

    _proto.then = function then() {
      var _Query$prototype$then,
        _this2 = this

      return (_Query$prototype$then = _Query.prototype.then.call(this, function(
        r
      ) {
        log.success('created extension:', _this2.sqlName)
        return r
      })).then.apply(_Query$prototype$then, arguments)
    }

    _createClass(Extension, [
      {
        key: 'sqlName',
        get: _get,
      },
    ])

    return Extension
  })(Query)
export default function extension(knex, name) {
  return new Extension(knex, name)
}

function _get2() {
  return this._nameBindings.nameBinding
}

export var DropExtension =
  /*#__PURE__*/
  (function(_Query2) {
    _inheritsLoose(DropExtension, _Query2)

    function DropExtension(knex, name) {
      var _this3

      _this3 =
        _Query2.call(this, knex, {
          create: 'DROP',
          extension: 'EXTENSION',
          ifExists: toUpper,
          name: identifier,
          cascade: toUpper,
          restrict: toUpper,
        }) || this

      _this3.name(name)

      return _this3
    }

    var _proto2 = DropExtension.prototype

    _proto2.then = function then() {
      var _Query2$prototype$the,
        _this4 = this

      return (_Query2$prototype$the = _Query2.prototype.then.call(
        this,
        function(r) {
          log.success('dropped extension:', _this4.sqlName)
          return r
        }
      )).then.apply(_Query2$prototype$the, arguments)
    }

    _createClass(DropExtension, [
      {
        key: 'sqlName',
        get: _get2,
      },
    ])

    return DropExtension
  })(Query)
export function dropExtension(knex, name) {
  return new DropExtension(knex, name)
}
