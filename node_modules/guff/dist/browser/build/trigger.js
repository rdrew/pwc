import _createClass from '@babel/runtime/helpers/createClass'
import _inheritsLoose from '@babel/runtime/helpers/inheritsLoose'
import emptyObj from 'empty/object'
import {log} from '../utils'
import Query, {
  toUpper,
  identifier,
  identifierBindings,
  conditionalBindings,
} from './Query'

function _eachRow() {
  return 'FOR EACH ROW'
}

function _eachStmt() {
  return 'FOR EACH STATEMENT'
}

function _get() {
  return this._nameBindings.nameBinding
}

export var Trigger =
  /*#__PURE__*/
  (function(_Query) {
    _inheritsLoose(Trigger, _Query)

    function Trigger(knex, name, proc) {
      var _this

      _this =
        _Query.call(this, knex, {
          create: 'CREATE',
          constraint: toUpper,
          trigger: 'TRIGGER',
          name: identifier,
          whenEvent: {
            options: {
              before: toUpper,
              after: toUpper,
              insteadOf: toUpper,
            },
          },
          event: {
            joiner: ' OR ',
            aggregate: {
              insert: toUpper,
              update: toUpper,
              delete: toUpper,
              truncate: toUpper,
            },
          },
          on: identifierBindings,
          from: identifierBindings,
          timing: {
            options: {
              notDeferrable: toUpper,
              deferrable: toUpper,
              initiallyImmediate: toUpper,
              initiallyDeferred: toUpper,
            },
          },
          forEach: {
            options: {
              eachRow: _eachRow,
              eachStmt: _eachStmt,
            },
          },
          when: conditionalBindings,
          executeProcedure: identifierBindings,
        }) || this

      _this.name(name)

      _this.executeProcedure(proc)

      return _this
    }

    var _proto = Trigger.prototype

    _proto.then = function then() {
      var _Query$prototype$then,
        _this2 = this

      return (_Query$prototype$then = _Query.prototype.then.call(this, function(
        r
      ) {
        log.success('created trigger:', _this2.sqlName)
        return r
      })).then.apply(_Query$prototype$then, arguments)
    }

    _createClass(Trigger, [
      {
        key: 'sqlName',
        get: _get,
      },
    ])

    return Trigger
  })(Query)

function makeName(name) {
  return name.split('(')[0].trim() + '_trigger'
}

export default function trigger(knex, name, proc) {
  if (name === void 0) {
    proc = knex.sqlName
    name = makeName(proc)
    knex = knex.knex
    proc = knex.raw(proc)
  }

  if (proc === void 0) {
    proc = name
    proc = typeof proc === 'string' ? proc : proc.sqlName
    proc = knex.raw(proc)
    name = makeName(name)
  }

  return new Trigger(knex, name, proc)
}

function _get2() {
  return this._nameBindings.nameBinding
}

export var DropTrigger =
  /*#__PURE__*/
  (function(_Query2) {
    _inheritsLoose(DropTrigger, _Query2)

    function DropTrigger(knex, name) {
      var _this3

      _this3 =
        _Query2.call(this, knex, {
          create: 'DROP',
          trigger: 'TRIGGER',
          ifExists: toUpper,
          name: identifier,
          on: identifierBindings,
          cascade: toUpper,
          restrict: toUpper,
        }) || this

      _this3.name(name)

      return _this3
    }

    var _proto2 = DropTrigger.prototype

    _proto2.then = function then() {
      var _Query2$prototype$the,
        _this4 = this

      return (_Query2$prototype$the = _Query2.prototype.then.call(
        this,
        function(r) {
          log.success('dropped trigger:', _this4.sqlName)
          return r
        }
      )).then.apply(_Query2$prototype$the, arguments)
    }

    _createClass(DropTrigger, [
      {
        key: 'sqlName',
        get: _get2,
      },
    ])

    return DropTrigger
  })(Query)
export function dropTrigger(knex, name) {
  return new DropTrigger(knex, name)
}
