import _createClass from '@babel/runtime/helpers/createClass'
import _inheritsLoose from '@babel/runtime/helpers/inheritsLoose'
import {log} from '../utils'
import Query, {toUpper, identifier, identifierBindings} from './Query'

function _get() {
  return this._nameBindings.nameBinding
}

export var Sequence =
  /*#__PURE__*/
  (function(_Query) {
    _inheritsLoose(Sequence, _Query)

    function Sequence(knex, name) {
      var _this

      _this =
        _Query.call(this, knex, {
          create: 'CREATE',
          temp: toUpper,
          sequence: 'SEQUENCE',
          ifNotExists: toUpper,
          name: identifier,
          increment: identifierBindings,
          minvalue: identifierBindings,
          noMinvalue: toUpper,
          maxvalue: identifierBindings,
          noMaxvalue: toUpper,
          start: identifierBindings,
          cache: identifierBindings,
          noCycle: toUpper,
          cycle: toUpper,
          ownedBy: identifierBindings,
          ownedByNone: toUpper,
        }) || this

      _this.name(name)

      return _this
    }

    var _proto = Sequence.prototype

    _proto.then = function then() {
      var _Query$prototype$then,
        _this2 = this

      return (_Query$prototype$then = _Query.prototype.then.call(this, function(
        r
      ) {
        log.success('created sequence:', _this2.sqlName)
        return r
      })).then.apply(_Query$prototype$then, arguments)
    }

    _createClass(Sequence, [
      {
        key: 'sqlName',
        get: _get,
      },
    ])

    return Sequence
  })(Query)
export default function sequence(knex, name) {
  return new Sequence(knex, name)
}

function _get2() {
  return this._nameBindings.nameBinding
}

export var DropSequence =
  /*#__PURE__*/
  (function(_Query2) {
    _inheritsLoose(DropSequence, _Query2)

    function DropSequence(knex, name) {
      var _this3

      _this3 =
        _Query2.call(this, knex, {
          create: 'DROP',
          trigger: 'SEQUENCE',
          ifExists: toUpper,
          name: identifier,
          cascade: toUpper,
          restrict: toUpper,
        }) || this

      _this3.name(name)

      return _this3
    }

    var _proto2 = DropSequence.prototype

    _proto2.then = function then() {
      var _Query2$prototype$the,
        _this4 = this

      return (_Query2$prototype$the = _Query2.prototype.then.call(
        this,
        function(r) {
          log.success('dropped sequence:', _this4.sqlName)
          return r
        }
      )).then.apply(_Query2$prototype$the, arguments)
    }

    _createClass(DropSequence, [
      {
        key: 'sqlName',
        get: _get2,
      },
    ])

    return DropSequence
  })(Query)
export function dropSequence(knex, name) {
  return new DropSequence(knex, name)
}
