import _regeneratorRuntime from '@babel/runtime/regenerator'
import _asyncToGenerator from '@babel/runtime/helpers/asyncToGenerator'
import {client, trimAll} from '../../utils'
import createUID, {
  createKnownUIDTable,
  createKnownUIDTrigger,
  dropKnownUIDTrigger,
  dropUID,
} from '../createUID'
export function up(_x, _x2, _x3) {
  return _up.apply(this, arguments)
}

function _callee2(knex, name, opt) {
  return _regeneratorRuntime.wrap(
    function _callee$(_context) {
      while (1) {
        switch ((_context.prev = _context.next)) {
          case 0:
            if (!opt.hasOwnProperty('primary')) {
              _context.next = 3
              break
            }

            _context.next = 3
            return createKnownUIDTable(knex)

          case 3:
            return _context.abrupt(
              'return',
              createUID(knex, typeof opt === 'object' ? opt : void 0)
            )

          case 4:
          case 'end':
            return _context.stop()
        }
      }
    },
    _callee2,
    this
  )
}

function _up() {
  _up = _asyncToGenerator(
    /*#__PURE__*/
    _regeneratorRuntime.mark(_callee2)
  )
  return _up.apply(this, arguments)
}

export var down = function down(knex, _ref) {
  var table = _ref.table,
    name = _ref.name
  return dropKnownUIDTrigger(knex, table, name)
}
export var after = function after(knex, _ref2) {
  var name = _ref2.name,
    table = _ref2.table,
    primary = _ref2.primary
  return primary !== void 0 && createKnownUIDTrigger(knex, table, name)
}
export var args = {
  bigInteger: function bigInteger(knex, name) {
    return name
  },
  defaultTo: function defaultTo(knex, name, opt) {
    return client(knex).raw(
      ((opt && opt.funcName) || 'guff_uid') + '(?)',
      opt && opt.shardID ? opt.shardID : 1
    )
  },
  comment: trimAll(
    '\n    Creates a 64-bit universally unique id. This is accomplished by\n    calculating a 41-bit representation of the milliseconds from a given\n    start epoch, using a 13-bit representation of the ID number of the\n    shard, and a 10-bit representation of a global ID sequence for a given\n    schema.\n  '
  ),
}
