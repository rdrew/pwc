import _objectSpread from '@babel/runtime/helpers/objectSpread'
import emptyObj from 'empty/object'
import {client} from '../utils'

function _Check(knex, table, column, initial) {
  this.knex = client(knex)
  this.table = table
  this.column = column
  this.constraints = null

  if (initial !== void 0) {
    this.constraint(initial)
  }
}

function _constraint2(_constraint, bindings) {
  if (bindings === void 0) {
    bindings = emptyObj
  }

  this.constraints = this.knex.raw(
    _constraint,
    _objectSpread(
      {
        col: this.column,
        column: this.column,
      },
      bindings
    )
  )
  return this
}

function _op(OP, constraint, bindings) {
  if (bindings === void 0) {
    bindings = emptyObj
  }

  if (this.constraints === null) {
    return this.constraint(constraint, bindings)
  }

  this.constraints = this.knex.raw('?? ' + OP + ' ??', [
    this.constraints,
    this.knex.raw(
      constraint,
      _objectSpread(
        {
          col: this.column,
          column: this.column,
        },
        bindings
      )
    ),
  ])
  return this
}

function _and(constraint, bindings) {
  return this.op('AND', constraint, bindings)
}

function _or(constraint, bindings) {
  return this.op('OR', constraint, bindings)
}

function _toSQL() {
  return this.knex
    .raw('ALTER TABLE :table: ADD CONSTRAINT :col: CHECK (:check)', {
      table: this.table,
      col: this.column,
      check: this.constraints,
    })
    .toSQL()
}

function _then() {
  var _this$knex$raw

  return (_this$knex$raw = this.knex.raw(
    'ALTER TABLE :table: ADD CONSTRAINT :col: CHECK (:check)',
    {
      table: this.table,
      col: this.column,
      check: this.constraints,
    }
  )).then.apply(_this$knex$raw, arguments)
}

var Check =
  /*#__PURE__*/
  (function() {
    var _proto = _Check.prototype
    _proto.constraint = _constraint2
    _proto.op = _op
    _proto.and = _and
    _proto.or = _or
    _proto.toSQL = _toSQL
    _proto.then = _then
    return _Check
  })()

export default function check(knex, table, column, initial) {
  return new Check(knex, table, column, initial)
}
