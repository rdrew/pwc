import emptyObj from 'empty/object'
import invariant from 'invariant'
import {schema, log} from '../utils'
import getSchemaName from './getSchemaName'
import func, {dropFunc} from './func'
var cache = {}
var keyFunc =
  "\nDECLARE\n  result text;\nBEGIN\n  SELECT encode(gen_random_bytes(bytes), 'base64') into result;\n  RETURN result;\nEND;\n"
var keyArgs = [
  {
    name: 'bytes',
    type: 'int4',
    default: 18,
  },
]
export default function createKey(knex, opt) {
  if (opt === void 0) {
    opt = emptyObj
  }

  !(knex !== void 0)
    ? process.env.NODE_ENV !== 'production'
      ? invariant(
          false,
          'createKey function requires that you provide a knex instance ' +
            'as the first argument'
        )
      : invariant(false)
    : void 0
  var _opt = opt,
    _opt$name = _opt.name,
    name = _opt$name === void 0 ? 'guff_key' : _opt$name
  var key = JSON.stringify({
    name: name,
    schemaName: getSchemaName(knex),
  })

  if (cache[key] === void 0) {
    cache[key] = func(knex, name)
      .args(keyArgs)
      .body(keyFunc)
      .returns('text')
  }

  return cache[key]
}
export function dropKey(knex, name, opt) {
  if (name === void 0) {
    name = 'guff_key'
  }

  return dropFunc(knex, name).args(keyArgs)
}
