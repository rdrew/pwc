import emptyArr from 'empty/array'
import {schema, log} from '../utils'
import getSchemaName from './getSchemaName'

function _ref3(c) {
  return c.after()
}

export default async function createTable(knex, tableName, columns) {
  let tableColumns

  function _ref2(r) {
    log.success('created table:', tableName)
    return r
  }

  await Promise.all(columns.map(c => c.setKnex(knex))).then(cols => {
    function _ref(t) {
      return (tableColumns = cols.map(c => c(t)))
    }

    return schema(knex)
      .hasTable(tableName)
      .then(exists => {
        if (exists === false) {
          return schema(knex)
            .createTable(tableName, _ref)
            .then(_ref2)
        } else {
          log('table already exists:', tableName)
          return exists
        }
      })
  })

  if (tableColumns !== void 0) {
    await Promise.all(tableColumns.map(_ref3))
  }

  return tableColumns || emptyArr
}
export async function dropTable(knex, tableName, columns = emptyArr) {
  await Promise.all(columns.map(c => c.setKnex(knex).down(tableName)))
  return knex.schema.dropTableIfExists(tableName).then(r => {
    log.success('dropped table:', tableName)
    return r
  })
}
