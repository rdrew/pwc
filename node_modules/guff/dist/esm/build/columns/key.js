import {client, trimAll} from '../../utils'
import createKey, {dropKey} from '../createKey'
import extension, {dropExtension} from '../extension'
import getSchemaName from '../getSchemaName'
export const up = async knex => {
  await extension(knex, 'pgcrypto')
    .ifNotExists()
    .schema(getSchemaName(knex))
  await createKey(knex)
}
export const down = async (knex, opt) => {
  await dropExtension(knex, 'pgcrypto')
    .ifExists()
    .cascade()
  await dropKey(knex, opt && opt.name)
}
export const args = {
  specificType: (knex, name) => [name, 'text'],
  defaultTo: (knex, name, opt) =>
    client(knex).raw('guff_key(?)', opt && opt.length ? opt.length : 24),
  notNullable: [],
  comment: trimAll(`
    Creates a cryptographically secure key that can be used for things like
    validating user sessions.
  `),
}
