import {client, trimAll} from '../../utils'
import createUID, {
  createKnownUIDTable,
  createKnownUIDTrigger,
  dropKnownUIDTrigger,
  dropUID,
} from '../createUID'
export async function up(knex, name, opt) {
  if (opt.hasOwnProperty('primary')) {
    await createKnownUIDTable(knex)
  }

  return createUID(knex, typeof opt === 'object' ? opt : void 0)
}
export const down = (knex, {table, name}) =>
  dropKnownUIDTrigger(knex, table, name)
export const after = (knex, {name, table, primary}) =>
  primary !== void 0 && createKnownUIDTrigger(knex, table, name)
export const args = {
  bigInteger: (knex, name) => name,
  defaultTo: (knex, name, opt) =>
    client(knex).raw(
      `${(opt && opt.funcName) || 'guff_uid'}(?)`,
      opt && opt.shardID ? opt.shardID : 1
    ),
  comment: trimAll(`
    Creates a 64-bit universally unique id. This is accomplished by
    calculating a 41-bit representation of the milliseconds from a given
    start epoch, using a 13-bit representation of the ID number of the
    shard, and a 10-bit representation of a global ID sequence for a given
    schema.
  `),
}
