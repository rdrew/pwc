import {client} from '../../utils'
import trigger, {dropTrigger} from '../trigger'
import func, {dropFunc} from '../func'
export const args = {
  timestamp: (knex, name) => name,
  defaultTo: knex => client(knex).raw(`NOW()`),
  notNullable: [],
}
const updateTrigger = `
BEGIN
  NEW.:updateFieldName: = now();
  RETURN NEW;
END;
`
export const after = async (knex, {name, table}) => {
  const fn = func(knex, `guff_update_${name}`)
    .body(updateTrigger, {
      updateFieldName: name,
    })
    .returnsTrigger()
  await fn
  return await trigger(fn)
    .on(table)
    .eachRow()
    .before()
    .update()
}
export const down = async (knex, {name, table}) => {
  name = `guff_update_${name}`
  const trigger = await dropTrigger(knex, `${name}_trigger`)
    .on(table)
    .ifExists()
    .cascade()
  await dropFunc(knex, name)
    .ifExists()
    .cascade()
  return trigger
}
