import {log} from '../utils'
import Query, {toUpper, identifier, identifierBindings} from './Query'
export class Sequence extends Query {
  constructor(knex, name) {
    super(knex, {
      create: 'CREATE',
      temp: toUpper,
      sequence: 'SEQUENCE',
      ifNotExists: toUpper,
      name: identifier,
      increment: identifierBindings,
      minvalue: identifierBindings,
      noMinvalue: toUpper,
      maxvalue: identifierBindings,
      noMaxvalue: toUpper,
      start: identifierBindings,
      cache: identifierBindings,
      noCycle: toUpper,
      cycle: toUpper,
      ownedBy: identifierBindings,
      ownedByNone: toUpper,
    })
    this.name(name)
  }

  get sqlName() {
    return this._nameBindings.nameBinding
  }

  then(...args) {
    return super
      .then(r => {
        log.success('created sequence:', this.sqlName)
        return r
      })
      .then(...args)
  }
}
export default function sequence(knex, name) {
  return new Sequence(knex, name)
}
export class DropSequence extends Query {
  constructor(knex, name) {
    super(knex, {
      create: 'DROP',
      trigger: 'SEQUENCE',
      ifExists: toUpper,
      name: identifier,
      cascade: toUpper,
      restrict: toUpper,
    })
    this.name(name)
  }

  get sqlName() {
    return this._nameBindings.nameBinding
  }

  then(...args) {
    return super
      .then(r => {
        log.success('dropped sequence:', this.sqlName)
        return r
      })
      .then(...args)
  }
}
export function dropSequence(knex, name) {
  return new DropSequence(knex, name)
}
