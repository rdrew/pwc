import emptyObj from 'empty/object'
import invariant from 'invariant'
import {schema, log} from '../utils'
import getSchemaName from './getSchemaName'
import func, {dropFunc} from './func'


const cache = {}
const keyFunc = `
DECLARE
  result text;
BEGIN
  SELECT encode(gen_random_bytes(bytes), 'base64') into result;
  RETURN result;
END;
`
const keyArgs = [{name: 'bytes', type: 'int4', default: 18}]

export default function createKey (knex, opt = emptyObj) {
  invariant(
    knex !== void 0,
    `createKey function requires that you provide a knex instance ` +
    `as the first argument`
  )
  let {name = 'guff_key'} = opt
  const key = JSON.stringify({name, schemaName: getSchemaName(knex)})

  if (cache[key] === void 0) {
    cache[key] = func(knex, name).args(keyArgs).body(keyFunc).returns('text')
  }

  return cache[key]
}

export function dropKey (knex, name = 'guff_key', opt) {
  return dropFunc(knex, name).args(keyArgs)
}
