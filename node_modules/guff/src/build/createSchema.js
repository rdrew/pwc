import emptyObj from 'empty/object'
import emptyArr from 'empty/array'
import {client, schema, log} from '../utils'
import {getSchemaNames} from './getSchemaName'

// DO NOT EXPOSE TO USERS
export function dropSchema (knex, opt = emptyObj) {
  let {ifExists = true, ignore = emptyArr} = opt
  const schemaNames = getSchemaNames(knex)
  const schemas = []

  for (let schemaName of schemaNames) {
    if (schemaName !== 'public' && opt.ignore.indexOf(schemaName) === -1) {
      // knex's internal dropSchema doesn't cascade
      schemas.push(
        client(knex).raw(
          `DROP SCHEMA ${ifExists ? 'IF EXISTS' : ''} ?? CASCADE`,
          schemaName
        ).then(
          r => {
            log.success('dropped schema:', schemaName)
            return r
          }
        )
      )
    }
  }

  return Promise.all(schemas)
}

// DO NOT EXPOSE TO USERS
export default function createSchema (knex, opt = emptyObj) {
  let {ifNotExists = true, ignore = [], authorization} = opt
  const schemaNames = getSchemaNames(knex)
  const schemas = []

  for (let schemaName of schemaNames) {
    if (schemaName !== 'public' && opt.ignore.indexOf(schemaName) === -1) {
      const fn = ifNotExists ? 'createSchemaIfNotExists' : 'createSchema'
      schemas.push(
        schema(knex)[fn](schemaName).then(
          r => {
            log.success('created schema:', schemaName)
            return r
          }
        )
      )

    }
  }

  return Promise.all(schemas)
}
