import emptyObj from 'empty/object'
import {client} from '../utils'


class Check {
  constructor (knex, table, column, initial) {
    this.knex = client(knex)
    this.table = table
    this.column = column
    this.constraints = null
    if (initial !== void 0) {
      this.constraint(initial)
    }
  }

  constraint (constraint, bindings = emptyObj) {
    this.constraints = this.knex.raw(
      constraint,
      {col: this.column, column: this.column, ...bindings}
    )

    return this
  }

  op (OP, constraint, bindings = emptyObj) {
    if (this.constraints === null) {
      return this.constraint(constraint, bindings)
    }

    this.constraints = this.knex.raw(
      `?? ${OP} ??`, [
        this.constraints,
        this.knex.raw(constraint, {col: this.column, column: this.column, ...bindings})
      ]
    )

    return this
  }

  and (constraint, bindings) {
    return this.op('AND', constraint, bindings)
  }

  or (constraint, bindings) {
    return this.op('OR', constraint, bindings)
  }

  toSQL () {
    return this.knex.raw(
      `ALTER TABLE :table: ADD CONSTRAINT :col: CHECK (:check)`,
      {table: this.table, col: this.column, check: this.constraints}
    ).toSQL()
  }

  then (...args) {
    return this.knex.raw(
      `ALTER TABLE :table: ADD CONSTRAINT :col: CHECK (:check)`,
      {table: this.table, col: this.column, check: this.constraints}
    ).then(...args)
  }
}

export default function check (knex, table, column, initial) {
  return new Check(knex, table, column, initial)
}
