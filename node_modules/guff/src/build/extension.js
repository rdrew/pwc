import Query, {toUpper, identifier, identifierBindings} from './Query'
import {log} from '../utils'


export class Extension extends Query {
  constructor (knex, name) {
    super(knex, {
      create: 'CREATE',
      extension: 'EXTENSION',
      ifNotExists: toUpper,
      name: identifier,
      schema: identifierBindings,
      version: identifier,
      from: identifier,
    })
    this.name(name)
  }

  get sqlName () { return this._nameBindings.nameBinding }

  then (...args) {
    return super.then(
      r => {
        log.success('created extension:', this.sqlName)
        return r
      }
    ).then(...args)
  }
}

export default function extension (knex, name) {
  return new Extension(knex, name)
}

export class DropExtension extends Query {
  constructor (knex, name) {
    super(knex, {
      create: 'DROP',
      extension: 'EXTENSION',
      ifExists: toUpper,
      name: identifier,
      cascade: toUpper,
      restrict: toUpper,
    })
    this.name(name)
  }

  get sqlName () { return this._nameBindings.nameBinding }

  then (...args) {
    return super.then(
      r => {
        log.success('dropped extension:', this.sqlName)
        return r
      }
    ).then(...args)
  }
}

export function dropExtension (knex, name) {
  return new DropExtension(knex, name)
}
